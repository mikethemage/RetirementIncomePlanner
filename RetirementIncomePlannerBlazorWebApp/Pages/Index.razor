@page "/"
@using System.ComponentModel;
@using RetirementIncomePlannerLogic;

@inject DataEntryViewModel InputModel
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject ReportViewModel Report

<link href="css/retirementincomeplanner.css" rel="stylesheet" />


<PageTitle>Retirement Income Planner</PageTitle>
<div class="container-all">


    <div class="retirement-income-planner-content">
        <h1>Retirement Income Planner</h1>
        <div class="general-data-input">

            <div class="data-input-row">
                <label for="NumberOfYears" class="data-input-label">Number of Years:</label>
                <div class="data-input-dropdown">
                    <select @bind="InputModel.NumberOfYears" id="NumberOfYears" class="form-select-sm dropdown-width">
                        @for (int i = 1; i <= 35; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
            </div>

            <div class="data-input-row">
                <label for="NumberOfClients" class="data-input-label">Number of Clients:</label>
                <div class="data-input-dropdown">
                    <select @bind="InputModel.NumberOfClients" id="NumberOfClients" class="form-select-sm dropdown-width">
                        @for (int i = 1; i <= 2; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
            </div>

            <div class="data-input-row">
                <label for="Indexation" class="data-input-label">Indexation:</label>
                <div class="data-input-text">
                    <input @bind="InputModel.Indexation.PercentageText" id="Indexation" class="form-text" />
                </div>
                <div class="required-field">
                    @if (InputModel.Indexation.IsRequired)
                    {
                        <div>*</div>
                    }
                </div>
            </div>

            <div class="data-input-row">
                <label for="RetirementPot" class="data-input-label">Retirement Pot:</label>
                <div class="data-input-text">
                    <input @bind="InputModel.RetirementPot.CurrencyText" id="RetirementPot" class="form-text" />
                </div>
                <div class="required-field">
                    @if (InputModel.RetirementPot.IsRequired)
                    {
                        <div>*</div>
                    }
                </div>
            </div>

            <div class="data-input-row">
                <label for="InvestmentGrowth" class="data-input-label">Investment Growth:</label>
                <div class="data-input-text">
                    <input @bind="InputModel.InvestmentGrowth.PercentageText" id="InvestmentGrowth" class="form-text" />
                </div>
                <div class="required-field">
                    @if (InputModel.InvestmentGrowth.IsRequired)
                    {
                        <div>*</div>
                    }
                </div>
            </div>
        </div>

        <div class="client-input-container">
            @foreach (ClientViewModel client in InputModel.Clients)
            {
                <div class="client-input-border">
                    <ClientSection Client="@client" />
                </div>
            }
        </div>

       



    </div>

    @if (InputModel.ImageGenerated)
    {
        <div class="chart-container">
            <img class="chart-image" id="chartImage" />
        </div>

        

    }

    <div class="button-content">
        <button class="action-button" disabled="@InputModel.CannotViewChart" @onclick="PreviewChart">Preview Chart</button>
        <button class="action-button" disabled="@InputModel.CannotExportReport" @onclick="DownloadFileFromStream">Export Report</button>
    </div>


</div>

@code
{
    private async Task PreviewChart()
    {
        Report.InputData = InputModel.CreateModel();
        Report.OutputData = PensionCalcs.RunPensionCalcs(Report.InputData);

        //Navigation.NavigateTo("/chart");

        //await JS.InvokeVoidAsync("open", "/chart", "_blank");

        InputModel.ImageGenerated = true;

        await SetImageAsync();
    }

    private async Task SetImageAsync()
    {
        var imageStream = PensionCalcs.ChartImageToStream(Report.Chart);
        var dotnetImageStream = new DotNetStreamReference(imageStream);
        await JS.InvokeVoidAsync("setImage", "chartImage", dotnetImageStream);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        var module = await JS.InvokeAsync<IJSObjectReference>(
    "import", "./scripts.js");

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        InputModel.PropertyChanged += PropertyChanged;
    }

    public void Dispose()
    {
        InputModel.PropertyChanged -= PropertyChanged;
    }

    private void PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task DownloadFileFromStream()
    {

        var dataInputModel = InputModel.CreateModel();
        var outputModel = PensionCalcs.RunPensionCalcs(dataInputModel);
        var chart = new ChartModel();
        chart.BuildChart(outputModel);

        using var fileStream = PensionCalcs.BuildReportAndReturnStream(dataInputModel, chart);


        var fileName = "Retirement Income Report.pdf";

        using var streamRef = new DotNetStreamReference(stream: fileStream);


        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

}